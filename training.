/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   training.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mkokorev <mkokorev@student.42berlin.d>     +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/03/28 18:35:14 by mkokorev          #+#    #+#             */
/*   Updated: 2024/04/23 16:09:36 by mkokorev         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "./minilibx-linux/mlx.h"
#include <math.h>
#include <stdlib.h>
#include <stdio.h>

typedef struct s_daa
{
	void	*img;
	char	*addr;
	int		bits_per_pixel;
	int		line_length;
	int		endian;
}	t_data;

typedef struct s_vars
{
	void	*mlx;
	void	*win;
}				t_vars;

void	my_mlx_pixel_put(t_data *data, int x, int y, int color)
{
	char	*dst;

	dst = data->addr + (y * data->line_length + x * (data->bits_per_pixel / 8));
	*(unsigned int *)dst = color;
}

void	draw_vertikal(t_data *img, float x, float y1, float y2)
{
	while (abs(y1 - y2) > 0)
	{
		my_mlx_pixel_put(&(*img), x, y1, 0x00FF0000);
		if (y1 < y2)
			y1++;
		else
			y1--;
	}
	my_mlx_pixel_put(&(*img), x, y1, 0x00FF0000);
	return ;
}

void	line_draw(t_data *img, float x1, float y1, float x2, float y2)
{
	float	k;
	int		i;
	int		y;
	int		x;
	int		y_comp;

	if (x1 > x2)
		return (line_draw(&(*img), x2, y2, x1, y1));
	if (x1 == x2)
		return (draw_vertikal(&(*img), x1, y1, y2));
	i = 1;
	y = y1;
	x = x1;
	k = ((y2 - y1) / (x2 - x1));
	while (abs(x - x2) > 0)
	{
		my_mlx_pixel_put(&(*img), x, y, 0x00FF0000);
		printf("x = %d, y = %d, i = %d\n", x, y, i);
		y = y1 + k * i++;
		y_comp = 2 * (int)y + 1;
		x++;
		if (y_comp - y > 0)
			draw_vertikal(&(*img), x, y, y1 + k * i);
	}
	my_mlx_pixel_put(&(*img), x2, y2, 0x00FF0000);
	return ;
}

int	close(int keycode, t_vars *vars)
{
	mlx_destroy_window(vars->mlx, vars->win);
	return (0);
}

int	finish(int keycode, t_vars *vars)
{
	mlx_clear_window(vars->mlx, vars->win);
	return (0);
}

	int main(void)
	{
	void	*mlx;
	void	*mlx_win;
	t_data	img;
	int		i;
	int		y;
	int		x;
	int		h;
	int		k;
	t_vars	vars;

	i = 0;
	y = 0;
	x = 0;
	h = 0;
	k = 0;
	mlx = mlx_init();
	mlx_win = mlx_new_window(mlx, 1920, 1080, "Hello world!");
	img.img = mlx_new_image(mlx, 1920, 1080);
	img.addr = mlx_get_data_addr(img.img, &img.bits_per_pixel,
			&img.line_length, &img.endian);
	while (x < 300)
	{
		y = x * x / 100;
		my_mlx_pixel_put(&img, x, y, 0x00FF0000);
		x++;
	}
	h = 960;
	k = 540;
	y = 340;
	while (y < 740)
	{
		x = 960 + sqrt(40000 - pow((y - 540), 2));
		my_mlx_pixel_put(&img, x, y, 0x00FF0000);
		x = 960 - sqrt(40000 - pow((y - 540), 2));
		my_mlx_pixel_put(&img, x, y, 0x00FF0000);
		y++;
	}
	y = 140;
	while (y < 940)
	{
		x = 960 + sqrt(160000 - pow(y, 2) + 1080 * y - 291600);
		my_mlx_pixel_put(&img, x, y, 0xcd0074);
		x = 960 - sqrt(160000 - pow(y, 2) + 1080 * y - 291600);
		my_mlx_pixel_put(&img, x, y, 0xcd0074);
		y++;
	}
	line_draw(&img, 0, 0, 1000, 200);
	mlx_put_image_to_window(mlx, mlx_win, img.img, 0, 0);
	mlx_hook(mlx_win, 2, 1L << 0, close, &vars);
	mlx_loop(mlx);

}

	// printf("colour:		%s\n", matrix[1][2].colour);
	// printf("x:		%d\n", matrix[1][2].x);
	// printf("y:		%d\n", matrix[1][2].y);
	// printf("z:		%d\n", matrix[1][2].z);
	// printf("end:		%d\n", matrix[10][18].end);
	//matrix = matrix_rotate(matrix);
